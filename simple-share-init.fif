#!/usr/bin/fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <workchain-id> <a-share> <a-addr> <b-share> <b-addr>" cr
  ."Creates a new share-smc in the specified workchain" cr 1 halt
} : usage

$# 5 <> ' usage if

$1 parse-int =: workchain
$2 parse-int =: a-share
$3 parse-smc-addr drop 2=: a-addr
$4 parse-int =: b-share
$5 parse-smc-addr drop 2=: b-addr

a-share b-share + 100 = not 
abort"The sum(share values) must be 100 (i.e. 100%)"

<{ SETCP0 ACCEPT
    "auto/simple-share-code.fif" include PUSHREF SETCODE
}>c =: code

<b
    a-share 7 u, a-addr Addr,
    b-share 7 u, b-addr Addr,
b>  =: init_storage

<b
    b{0011} s,  // split_depth:0 special:0 code:1 data:1
    code ref,
    init_storage ref,
    null dict,  // library
b>  =: state-init

state-init hashu workchain swap 2=: smc_addr

."new simple-share smc address:           " smc_addr    .addr cr
."non-bounceable address (for init):      " smc_addr  7 .Addr cr
."bounceable address (for later access):  " smc_addr  6 .Addr cr cr

<b  // init msg
    b{1000100} s,
    smc_addr addr,
    b{000010} s,
    state-init <s s,
    b{0} s,
b> 2 boc+>B

"auto/init.boc" tuck B>file
."saved smc creating query to file:       " type cr


